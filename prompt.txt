Develop a demo web app:
## ChronoSync Demo App – Developer Implementation Summary
For a more in-depth understanding of the features, please refer to the detailed feature descriptions in the `concept.md` file.
### Overview

ChronoSync is a multi-user calendar manager that integrates AI-powered scheduling, task management, and smart notifications—all wrapped in a responsive, accessible UI. For the demo, all data and interactions will be mocked and stored in local state (or in-memory JSON) with no authentication. The goal is to showcase the full range of functionalities with simulated behavior for features that, in a production app, would require back-end support or external integrations.

---

### Core Features & How to Demo Them

1. **Calendar Interface & Views**
   - **Implementation:** Create a dynamic calendar interface that supports daily, weekly, and monthly views.
   - **Mock Data:** Load events from a static JSON file. Allow events to be created, edited, or deleted (persist only in local state).
   - **UI Elements:** Calendar grid, event popups/modals, drag-and-drop rescheduling.

2. **AI-Powered Scheduling (Mocked)**
   - **Implementation:** Provide a “Smart Schedule” feature.
   - **Mock Behavior:** Simulate AI suggestions by predefining a set of optimal time slots based on the mocked data. For example, when a user clicks “Find Optimal Time,” randomly select from available slots.
   - **UI Elements:** Button to trigger suggestions, a suggestion panel that highlights proposed time slots.

3. **Time Zone Adjustments**
   - **Implementation:** Allow the user to choose a time zone from a dropdown.
   - **Mock Behavior:** Use libraries like Moment.js or date-fns-tz to convert event times dynamically based on the selected time zone.
   - **UI Elements:** Time zone selector; calendar times update accordingly.

4. **Automated Meeting Coordination (Mocked)**
   - **Implementation:** Create a “Multi-User Availability” view.
   - **Mock Behavior:** Display a list of mock users with their available time blocks. Highlight common free slots when scheduling a meeting.
   - **UI Elements:** Multi-select user dropdown and a visual timeline showing overlapping free/busy times.

5. **Role-Based Access Control (Simulated)**
   - **Implementation:** Since there’s no authentication, simulate user roles via a dropdown or toggle (Admin, Manager, Employee, Guest).
   - **Mock Behavior:** Change the UI based on the selected role. For example, an “Admin” sees full edit controls, whereas a “Guest” sees a read-only calendar.
   - **UI Elements:** Role switcher control that updates permissions in real time.

6. **Calendar Sharing & Permissions (Mocked)**
   - **Implementation:** Include a feature to “share” calendars with preset permissions (view-only, edit, full control).
   - **Mock Behavior:** Use local state to store and display permission settings. Simulate sharing by showing a list of mock users with their permission levels.
   - **UI Elements:** Sharing modal, toggle switches for permission levels, visual indicators on the calendar (e.g., icons or color codes).

7. **Meeting Request Approvals (Simulated)**
   - **Implementation:** Enable a workflow where new events can be flagged as “Pending Approval.”
   - **Mock Behavior:** Mark newly created events with a pending status and display a notification panel for “approvals.” Allow the user to toggle approval status manually.
   - **UI Elements:** Approval status badge on events, a notifications area listing pending requests, and buttons for “Approve” or “Reject.”

8. **Task & Project Management Integration**
   - **Implementation:** Integrate a basic task list alongside the calendar.
   - **Mock Behavior:** Let users add tasks, drag them onto the calendar (simulating time blocking), and mark tasks as complete. Associate tasks with events or projects using static data.
   - **UI Elements:** Task panel with list items, drag-and-drop functionality to “schedule” tasks, visual links between tasks and calendar events.

9. **Responsive UI with Dark Mode & Accessibility**
   - **Implementation:** Build a responsive interface using a modern JavaScript framework (React, Vue, or Angular) and a UI component library (e.g., Material UI or Bootstrap).
   - **Mock Behavior:** Provide a toggle for dark mode and ensure all interactive elements are keyboard navigable with proper ARIA labels.
   - **UI Elements:** Dark mode toggle, responsive layout, accessible modals, and navigation menus.

10. **Notifications, Reminders & Follow-Up Tracking (Mocked)**
    - **Implementation:** Create a notifications panel that simulates reminders for upcoming events and follow-up tasks.
    - **Mock Behavior:** Use JavaScript’s `setTimeout` (or simulate with buttons) to show demo notifications that update the UI. Allow manual triggering of “follow-up” prompts after an event.
    - **UI Elements:** Notification bell icon, a panel listing reminders and follow-up tasks, and demo popups.

11. **Advanced Analytics Dashboard (Mocked)**
    - **Implementation:** Build a dashboard that displays static charts and metrics (e.g., meetings per day, time spent in meetings vs. focus time).
    - **Mock Behavior:** Use a chart library (like Chart.js) to render graphs based on preloaded mock analytics data. Optionally, update metrics based on changes in the demo data.
    - **UI Elements:** Analytics charts (bar, pie, line graphs), KPI summary panels.

12. **Integration Placeholders**
    - **Implementation:** Provide UI buttons and modals to simulate integrations with Google Calendar, Outlook, Slack, Zoom, etc.
    - **Mock Behavior:** Clicking a “Sync” or “Create Video Meeting” button displays a modal or notification that confirms a simulated integration action. No real API calls are made.
    - **UI Elements:** Integration buttons (e.g., “Sync with Google Calendar”), demo modals with static integration details.

13. **Real-Time Updates Simulation**
    - **Implementation:** Simulate real-time updates by allowing the user to “refresh” the view or switch between preloaded states.
    - **Mock Behavior:** Use in-app state updates or a manual “Refresh” button to mimic the effect of live updates.
    - **UI Elements:** A refresh icon/button and visual cues (like fading transitions) that indicate data updates.

14. **Mocked Data Setup**
    - **Implementation:** Prepare static JSON files or JavaScript objects containing:
      - A list of events (with properties such as title, time, status, and assigned users).
      - A set of mock users with roles and time zones.
      - Task lists with associated deadlines and project tags.
      - Predefined analytics data for the dashboard.
    - **Usage:** Simulate API calls (using `setTimeout` for delays) to fetch this data, ensuring the demo feels interactive.

---

### Demo Flow

1. **Landing Page:**  
   - A simple welcome screen briefly describing ChronoSync and its key features.

2. **Main Calendar View:**  
   - Display the calendar populated with events from the mocked data.
   - Allow switching between daily, weekly, and monthly views.
   - Provide controls for adding or editing events.

3. **Role Simulation:**  
   - Include a dropdown to switch between roles (Admin, Manager, Employee, Guest).  
   - The UI should update (e.g., showing/hiding editing options) based on the selected role.

4. **Smart Scheduling & Automated Coordination:**  
   - Let users create new events.  
   - Provide a “Smart Schedule” button that displays pre-set optimal times.
   - Show a multi-user availability view that highlights common free slots.

5. **Task & Project Integration:**  
   - Include a side panel with tasks that can be dragged onto the calendar.
   - Allow users to simulate task scheduling and completion.

6. **Notifications & Approval Workflow:**  
   - Display a notifications panel listing pending event approvals and reminders.
   - Allow users to manually “approve” or “reject” events.

7. **Analytics Dashboard:**  
   - Present static charts and metrics summarizing meeting stats.
   - Update the charts in response to user interactions with the calendar (using the mock data).

8. **Integration Placeholders:**  
   - Provide buttons to “Sync with Google Calendar” or “Create Zoom Meeting” which trigger modals indicating the demo nature of these features.

9. **Real-Time Update Simulation:**  
   - Offer a refresh button to simulate real-time updates, showing how the calendar changes when new data is "fetched."


# Important note on accessibility:
For all inputs and buttons or other control elements that the user can interact with define an id. You can add that id to the html element by declaring the v-voix="'id'" attribute. the id should be clear on what the element does. For example, a button to submit a contact form should be called something like "Submit Contact Form". Additionally, you may write the hint="some description" attribute on those html elements to give more information about usage, order of usage in comparison to other elements, and so on. Keep this a short if you need it. Additionally, review the router routes. add a meta route-description to any router to describe what it is for. For example:
{
   "path":"/",
   "name":"home",
   "component":"Home",
   "meta":{
      "voix-description":"Start page of the application. Shows..."
   }
}


# status of Implementation
Implementation of the above features is already in progress. Review what has been implemented before you start