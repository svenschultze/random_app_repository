Develop a demo web app:

## Overview

**MyRecipeBook Demo** is a single-page application (SPA) that simulates a recipe-sharing platform with multiple router pages. It features a client-side search function and a markdown text field for entering and displaying recipe instructions. All data interactions are simulated using static JSON or in-memory objects, with no backend or persistent storage.

You can find a detailed UI/UX concept in the concept.md file.
---

## Key Pages and Features

### 1. Home Page (`/`)
- **Purpose:**  
  Introduce users to the app and direct them to key features.
- **Features:**  
  - **Featured Recipes:**  
    Display a carousel or grid showcasing a few highlighted recipes from the mocked dataset.
  - **Introduction Section:**  
    A brief narrative outlining the app’s mission.
  - **Navigation Links:**  
    Prominent links to “Recipes,” “Add Recipe,” “About,” and “Contact” pages.
- **Mock Data:**  
  Use a subset of recipes as featured items.

---

### 2. Recipes List Page (`/recipes`)
- **Purpose:**  
  Allow users to browse, filter, and search through available recipes.
- **Features:**  
  - **Recipe Grid/List:**  
    Display recipes with a thumbnail, title, and short description.
  - **Search Functionality:**  
    - **Search Bar:**  
      An input field where users can type keywords (e.g., recipe titles, ingredients) to filter the list.
    - **Debounce Logic:**  
      Implement debounce on the search input to optimize performance during typing.
    - **Client-Side Filtering:**  
      Dynamically filter the mocked recipe dataset based on the search query.
  - **Filtering & Sorting Options:**  
    Additional options for filtering by cuisine or dietary preferences and sorting by criteria like “newest” or “most popular.”
- **Mock Data:**  
  Use a static array of recipe objects with fields such as `id`, `title`, `description`, `ingredients`, `instructions` (in markdown), `imageURL`, etc.

---

### 3. Recipe Detail Page (`/recipes/:id`)
- **Purpose:**  
  Display complete details for a selected recipe.
- **Features:**  
  - **Recipe Information:**  
    Show the recipe title, high-quality image, ingredients list, cooking time, nutritional info, and instructions.
  - **Markdown Rendering:**  
    Render the recipe instructions by converting the stored markdown text into HTML. This can be done using a lightweight markdown parser or a simple conversion function.
  - **Comments/Reviews:**  
    A static list of mocked comments and ratings to simulate community interaction.
  - **Action Buttons:**  
    Buttons for “Favorite” or “Save” to simulate user interactions (state changes only).
- **Mock Data:**  
  Load recipe details from the mocked dataset; comments and ratings are hard-coded arrays tied to each recipe.

---

### 4. Add Recipe Page (`/add`)
- **Purpose:**  
  Let users submit new recipes using a guided form.
- **Features:**  
  - **Form Fields:**  
    Include inputs for:
    - **Title**
    - **Ingredients:** A multi-line text area.
    - **Instructions (Markdown):**  
      A plain textarea where users can enter instructions using markdown syntax (e.g., for bold, italics, lists).
    - **Cuisine Tags:** Dropdown or multi-select options.
    - **Image Upload:** Simulated file input (no actual upload).
  - **Markdown Usage:**  
    - **Input:** Store the markdown text as-is in the mocked data.
    - **Preview (Optional):** Provide a simple preview that converts the markdown into HTML so users can see their formatted content before submission.
  - **Form Validation:**  
    Ensure required fields are filled out and display inline error messages if needed.
  - **Submission Handling:**  
    On submission, update the local state with the new recipe and optionally display a success message or redirect to the Recipes List page.
- **Mock Data:**  
  Newly added recipes are appended to the in-memory data, persisting only for the session.

---

### 5. About Page (`/about`)
- **Purpose:**  
  Explain the app’s mission, inspiration, and future directions.
- **Features:**  
  - **Static Content:**  
    Hard-coded narrative about the project and the team behind it.
  - **Testimonials/Stories:**  
    Optionally include a few static testimonials or success stories.
- **Mock Data:**  
  All content is embedded directly in the component.

---

### 6. Contact Page (`/contact`)
- **Purpose:**  
  Provide a way for users to send feedback or inquiries.
- **Features:**  
  - **Contact Form:**  
    Fields for name, email, and message.
  - **Submission Feedback:**  
    Simulate form submission by displaying a “Thank you for your feedback” message without backend processing.
  - **FAQ/Info Section:**  
    Optionally include additional contact details or a small FAQ.
- **Mock Data:**  
  All messaging functionality is simulated on the client side.

---

## Developer Implementation Guidelines

1. **Routing & Navigation:**  
   - Use a routing library (e.g., React Router) to map the routes (`/`, `/recipes`, `/recipes/:id`, `/add`, `/about`, `/contact`).
   - Implement a persistent navigation bar or sidebar for seamless page transitions.

2. **State Management & Mocked Data:**  
   - Store all recipe and comment data in a static JSON file or as in-memory JavaScript objects.
   - Use local state or context providers to manage dynamic interactions such as adding new recipes or filtering the list.
   - Simulate asynchronous behavior with `setTimeout` if desired.

3. **Markdown Text Field for Recipe Instructions:**  
   - **Input Field:**  
     Use a plain textarea in the “Add Recipe” form where users can type in markdown syntax.
   - **Storage:**  
     Store the markdown text as part of the recipe object.
   - **Rendering:**  
     In the Recipe Detail page, convert the markdown to HTML using a simple parser or a custom conversion function. This allows formatted text (e.g., headings, lists, bold/italic text) to be displayed properly without needing an external rich text component.
   - **Optional Preview:**  
     Implement a basic preview feature that shows the rendered HTML before submission.

4. **Search Functionality:**  
   - **Search Bar:**  
     Add an input field on the Recipes List page for entering search keywords.
   - **Client-Side Filtering:**  
     Use JavaScript to filter the displayed recipes based on matches in the title, ingredients, or description.
   - **Debouncing:**  
     Implement debounce logic to delay filtering until the user stops typing, improving performance.
   - **Feedback:**  
     Show a “No results found” message if no recipes match the search query.

5. **Component Structure:**  
   - **Pages:** Create individual components for Home, Recipes List, Recipe Detail, Add Recipe, About, and Contact.
   - **Reusable Components:**  
     Develop shared components (e.g., RecipeCard, NavigationBar, FormInput) to ensure consistency.
   - **Error Handling:**  
     Incorporate basic error handling for form validations and display user-friendly error messages.

6. **Styling & Responsiveness:**  
   - Use CSS frameworks (such as Bootstrap or Tailwind CSS) or custom CSS to ensure a responsive design.
   - Maintain consistent styling and layout across all pages, including for the markdown preview and rendered content.

7. **Testing & Demo Readiness:**  
   - Test navigation between pages, search functionality, markdown conversion, and form validations.
   - Ensure all dynamic actions update the UI state correctly.
   - Provide a mechanism to reset the demo state (e.g., refreshing the page reloads the original mocked data).

---

By following this updated summary, developers can implement a demo version of MyRecipeBook that showcases all core features—including a simple markdown text field for recipe instructions and a robust client-side search—without relying on external rich text components. This setup effectively demonstrates the full scope of the concept using only mocked data and no authentication system.

# Important note on accessibility:
For all inputs and buttons or other control elements that the user can interact with define an id. You can add that id to the html element by declaring the v-voix="'id'" attribute. the id should be clear on what the element does. For example, a button to submit a contact form should be called something like "Submit Contact Form". Additionally, you may write the hint="some description" attribute on those html elements to give more information about usage, order of usage in comparison to other elements, and so on. Keep this a short if you need it. Additionally, review the router routes. add a meta route-description to any router to describe what it is for. For example:
{
   "path":"/",
   "name":"home",
   "component":"Home",
   "meta":{
      "voix-description":"Start page of the application. Shows..."
   }
}