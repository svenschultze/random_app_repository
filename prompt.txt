Develop a demo web app:

## Overview of Survey Architect
You can find a detailed UI/UX concept in the concept.md file. Read it carefully before starting the development.
Below is a top–down comprehensive development guide that outlines the design, architecture, and steps to implement the Vue.js 3 frontend-only survey editor with standalone HTML export—without any code implementations.

---

# Comprehensive Development Guide for a Vue.js 3 Frontend-Only Survey Editor

This guide provides a high-level overview for building a single-page application (SPA) survey editor that allows users to design scientific surveys with diverse question types, branching logic, and internationalization. The editor then exports a self-contained HTML file that embeds a Vue instance to render the survey form.

---

## 1. Project Overview

- **Objective:**  
  Create a frontend-only survey editor that enables researchers to visually design and configure surveys, then export a fully functional standalone HTML file containing a Vue instance with the survey form.

- **Key Features:**
  - **Interactive Editor:** A drag-and-drop interface for survey creation.
  - **Question Types:** Support for multiple choice, Likert scales, open text, matrix questions, file uploads, ranking, dropdowns, etc.
  - **Branching Logic:** Ability to define conditional flows (skip logic/adaptive questioning).
  - **Randomization:** Options to randomize question and answer order.
  - **Internationalization (i18n):** Built-in tools for managing translations and enabling dynamic language switching.
  - **Live Preview:** Real-time display of the designed survey.
  - **Export Functionality:** Generate a standalone HTML file that includes the survey configuration, embedded Vue instance, and necessary styling, working offline without a backend.

---

## 2. Technology Stack & Dependencies

- **Frontend Framework:** Vue.js 3 (utilizing the Composition API)
- **Build Tool:** Vite (recommended) or Vue CLI for project scaffolding and hot reloading
- **State Management:** Vue’s built–in reactivity or Vuex if needed for complex state management
- **Internationalization:** vue-i18n to handle translations and locale switching
- **Drag-and-Drop Library:** A library like Vue.Draggable to enable drag–and–drop functionality in the editor
- **CSS Framework (Optional):** Tailwind CSS or BootstrapVue for responsive design and styling
- **Export Mechanism:** Browser APIs (e.g., Blob API) for generating and downloading a standalone HTML file

---

## 3. Project Structure Overview

A suggested project structure:

```
survey-editor/
├── public/
│   └── index.html          # Entry point for the survey editor application
├── src/
│   ├── assets/             # Assets like images, fonts, etc.
│   ├── components/         # Vue components for editor UI, preview, and individual question types
│   │   ├── Editor.vue      # Main editor component
│   │   ├── Preview.vue     # Live preview component for the survey form
│   │   ├── QuestionTypes/  # Folder for each specific question type component (MultipleChoice.vue, Likert.vue, etc.)
│   │   └── QuestionWrapper.vue  # Dynamic component loader based on question type
│   ├── i18n/               # Internationalization files (e.g., en.json, es.json)
│   ├── utils/              # Utility functions (e.g., for exporting HTML)
│   ├── App.vue             # Root component integrating Editor and Preview
│   └── main.js             # Application bootstrap file that initializes Vue and plugins
├── package.json
└── vite.config.js          # Build configuration (if using Vite)
```

---

## 4. High-Level Implementation Plan

### 4.1. Editor Interface

- **UI Layout:**  
  - A toolbar for adding and configuring survey questions.
  - A sidebar for survey settings (branching logic, translation management, randomization options).
  - A main canvas where survey elements are visually arranged and managed using drag–and–drop.
  - Integration of a live preview pane to show the current survey appearance.

- **Component Structure:**  
  - **Editor Component:** Manages overall survey configuration and user interactions.
  - **Dynamic Question Wrapper:** Loads specific question components based on type.
  - **Question Components:** Individual components for each survey question type, designed as reusable Vue components.

### 4.2. Internationalization

- **Integration with vue-i18n:**  
  - Set up a translation system to support multiple languages.
  - Provide a UI for survey creators to enter and manage translations for all survey text (questions, options, instructions).
  - Ensure the exported survey includes language switching functionality.

### 4.3. Branching Logic & Randomization

- **Branching Logic:**  
  - Allow survey creators to define conditional rules (e.g., “if Q1 answer is ‘No’, then skip to Q3”).
  - Store branching conditions as part of the survey configuration.
  - The exported survey will evaluate these conditions dynamically as respondents answer questions.

- **Randomization:**  
  - Provide settings to randomize the order of questions and/or answer options.
  - Use a shuffle algorithm at runtime in the exported form to implement this feature.

### 4.4. Live Preview

- **Preview Component:**  
  - Render a read–only version of the survey based on the current configuration.
  - Ensure the preview reflects all settings including branching logic, randomization, and translations.
  - Allow survey designers to interactively see changes in real time.

### 4.5. Exporting the Standalone HTML File

- **Export Workflow:**  
  1. **Compile Configuration:** Gather the complete survey configuration (questions, logic, translations, styling) from the editor.
  2. **Generate HTML Template:** Create an HTML document template that includes:
     - Required `<head>` elements and styles.
     - A mounting element (e.g., `<div id="app"></div>`).
     - Embedded scripts that load Vue.js (from a CDN) and contain the survey-rendering logic.
     - An inline block (or script tag) with the JSON configuration.
  3. **Embed Survey Code:** The exported file must instantiate a Vue app on load to render the survey, applying the branching logic and internationalization.
  4. **Download Mechanism:** Use browser APIs (e.g., Blob API) to create and trigger a download of the generated HTML file.

---

## 5. Detailed Development Steps

### Step 1: Project Setup

- **Initialize the project** using Vite or Vue CLI.
- **Install Dependencies:** Vue.js 3, vue-i18n, Vue.Draggable (or a similar drag-and-drop library), and optional CSS framework.
- **Set up project structure** as outlined above.

### Step 2: Develop the Editor Interface

- **Design the UI layout:**  
  Define the editor’s layout with sections for the toolbar, sidebar, canvas, and live preview.
- **Create Components:**  
  Build the main Editor component, dynamic QuestionWrapper component, and individual question type components.
- **Implement drag-and-drop:**  
  Integrate the drag–and–drop functionality to allow reordering of questions on the canvas.
- **Integrate state management:**  
  Use Vue’s reactivity (or Vuex) to manage the survey’s configuration as questions are added, edited, or removed.

### Step 3: Implement Internationalization

- **Set up vue-i18n:**  
  Configure the plugin in the main application.
- **Create translation files:**  
  Prepare JSON files for each supported language.
- **Translation management UI:**  
  Build an interface that allows survey designers to input and edit translations for each text element.

### Step 4: Add Branching Logic & Randomization Features

- **Extend survey data model:**  
  Include properties in each question object to store conditional logic and randomization settings.
- **Develop a rules editor:**  
  Create UI elements in the sidebar for setting up branching conditions.
- **Plan runtime evaluation:**  
  Define how the exported survey will process the branching logic dynamically as respondents interact with the form.
- **Implement randomization controls:**  
  Provide toggles or options to enable/disable randomization at the question or survey level.

### Step 5: Build the Live Preview

- **Implement the Preview component:**  
  Use the same question components to render a live, read–only view of the survey.
- **Ensure synchronization:**  
  Update the preview in real time as the survey configuration changes in the editor.

### Step 6: Create the Export Mechanism

- **Design an export utility:**  
  Define the process for generating the standalone HTML file:
  - Create an HTML template that includes:
    - A `<head>` section with necessary meta tags and styles.
    - A `<body>` with a mount point for Vue.
    - Script tags to load Vue from a CDN.
    - An inline block that embeds the survey configuration as JSON.
    - Survey rendering logic that instantiates a new Vue instance.
- **Implement file generation:**  
  Use browser APIs to compile the HTML template with the current survey configuration.
- **Trigger file download:**  
  Implement functionality to generate a downloadable HTML file when the user clicks the export button.

### Step 7: Testing & Quality Assurance

- **Unit Testing:**  
  Write tests for key components (e.g., question types, translation editor, branching logic).
- **Integration Testing:**  
  Verify the editor’s workflow from survey design to export.
- **Cross-Browser Testing:**  
  Ensure that the exported HTML file works correctly in all major browsers.
- **Accessibility Testing:**  
  Check that the survey form and editor UI meet accessibility standards.

### Step 8: Documentation & Deployment

- **Document the Codebase:**  
  Write clear documentation covering installation, component usage, and how to extend features.
- **Prepare for Deployment:**  
  Configure production builds using your chosen build tool.
- **Future Enhancements:**  
  Consider features such as saving drafts to local storage, additional export formats (e.g., JSON configuration), and advanced analytics integration.

# Important note on accessibility:
For all inputs and buttons or other control elements that the user can interact with define an id. You can add that id to the html element by declaring the v-voix="'id'" attribute. the id should be clear on what the element does. For example, a button to submit a contact form should be called something like "Submit Contact Form". Additionally, you may write the hint="some description" attribute on those html elements to give more information about usage, order of usage in comparison to other elements, and so on. Keep this a short text and only use if required for understanding. The id should be descriptive on its own. Additionally, review the router routes. add a meta route-description to any router to describe what it is for. For example:
{
   "path":"/",
   "name":"home",
   "component":"Home",
   "meta":{
      "voix-description":"Start page of the application. Shows..."
   }
}